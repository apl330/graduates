<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
    xmlns="http://www.springframework.org/schema/security"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <http entry-point-ref="casEntryPoint" use-expressions="true">
        <intercept-url pattern="/" access="permitAll"/>
        <intercept-url pattern="/index.jsp" access="permitAll"/>
        <intercept-url pattern="/cas-logout.jsp" access="permitAll"/>
        <intercept-url pattern="/casfailed.jsp" access="permitAll"/>
        <intercept-url pattern="/remote/*" access="permitAll"/>
		<intercept-url pattern="/versionupdate/version-update-edit.*" access="permitAll"/>
		<intercept-url pattern="/versionupdate/version-update-update.*" access="permitAll"/>
		<intercept-url pattern="/projectdocument/projectdocument-add.*" access="permitAll"/>
		<intercept-url pattern="/projectdocument/projectdocument-addAttachment.*" access="permitAll"/>
		<intercept-url pattern="/subprojectdocument/projectdocument-add.*" access="permitAll"/>
		<intercept-url pattern="/subprojectdocument/projectdocument-addAttachment.*" access="permitAll"/>
		<intercept-url pattern="/license/license-addAttachment.*" access="permitAll"/>
		<intercept-url pattern="/subproject/subprojectmaterial-add.*" access="permitAll"/>
		<intercept-url pattern="/subproject/subprojectmaterial-addAttachment.*" access="permitAll"/>
		<intercept-url pattern="/contract/attachment-add.*" access="permitAll"/>
		<intercept-url pattern="/contract/subattachment-add.*" access="permitAll"/>
		<intercept-url pattern="/standalonecontract/attachment-add.*" access="permitAll"/>
		
		
		<intercept-url pattern="/assignment/assignment-manage.*" access="hasRole('ROLE_SUPERVISOR')" />
		<intercept-url pattern="/contract/contract-view.*" access="hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM') or hasRole('ROLE_PMO')or hasRole('ROLE_DM')"  />
        <intercept-url pattern="/specialtystep/specialty-step-edit.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/specialtystep/add-workstep.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/specialtystep/remove-workstep.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/person/person-edit.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/person/person-remove.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/person/person-submit.*" access="hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM') or hasRole('ROLE_PMO')or hasRole('ROLE_DM')" />
        <intercept-url pattern="/organization/organization-edit.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/organization/organization-remove.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/organization/organization-submit.*" access="hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM') or hasRole('ROLE_PMO')or hasRole('ROLE_DM')" />
        <intercept-url pattern="/dictionary/dictionary-edit.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/dictionary/dictionary-remove.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/dictionary/dictionary-submit.*" access="hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM') or hasRole('ROLE_PMO')or hasRole('ROLE_DM')" />
        <intercept-url pattern="/project/project-specialty-edit.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/project/project-save.*" access="hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM') or hasRole('ROLE_PMO')or hasRole('ROLE_DM')" />
        <intercept-url pattern="/project/project-finish.*" access="hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM') or hasRole('ROLE_PMO')or hasRole('ROLE_DM')" />
        <intercept-url pattern="/project/project-edit.*" access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/project/project.*" access="hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM')  or hasRole('ROLE_PMO')or hasRole('ROLE_DM')" />
	    <intercept-url pattern="/**" access="hasRole('ROLE_USER') or hasRole('ROLE_SUPERVISOR') or hasRole('ROLE_PM') or hasRole('ROLE_PMO')or hasRole('ROLE_DM')" />
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER" />
        <logout logout-success-url="/cas-logout.jsp"/>
    </http>

    <b:bean id="casEntryPoint"
        class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties" p:loginUrl="http://${cas.server.host}/cas/login" />

    <b:bean id="serviceProperties"
        class="org.springframework.security.cas.ServiceProperties"
        p:service="http://${cas.service.host}/proj-mgmt/j_spring_cas_security_check"/>

    <b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <!-- <b:constructor-arg value="http://${cas.server.host}/cas/logout"/> -->
        <b:constructor-arg value="http://${cas.service.host}/proj-mgmt/"/>
        <b:constructor-arg>
            <b:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </b:constructor-arg>
    </b:bean>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>




    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <b:bean id="casFilter"
        class="org.springframework.security.cas.web.CasAuthenticationFilter"
        p:authenticationManager-ref="authManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage"
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <b:property name="authenticationSuccessHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
            	p:defaultTargetUrl="/"/>
        </b:property>
        <b:property name="authenticationFailureHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/casfailed.jsp"/>
        </b:property>
    </b:bean>

    <authentication-manager alias="authManager">
        <authentication-provider ref="casAuthProvider" />
    </authentication-manager>

    <b:bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="casAuthProviderKey">
        <b:property name="authenticationUserDetailsService">
            <b:bean
                class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <b:constructor-arg ref="userService" />
            </b:bean>
        </b:property>
        <b:property name="ticketValidator">
            <b:bean
                class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                p:acceptAnyProxy="true"
                p:proxyCallbackUrl="http://${cas.service.host}/proj-mgmt/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <b:constructor-arg value="http://${cas.server.host}/cas" />
            </b:bean>
        </b:property>
        <b:property name="statelessTicketCache">
            <b:bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <b:property name="cache">
                    <b:bean class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <b:constructor-arg value="casTickets"/>
                        <b:constructor-arg value="50"/>
                        <b:constructor-arg value="true"/>
                        <b:constructor-arg value="false"/>
                        <b:constructor-arg value="3600"/>
                        <b:constructor-arg value="900"/>
                        <b:property name="diskStorePath"  value="${java.io.tmpdir}"/>
                    </b:bean>
                </b:property>
            </b:bean>
        </b:property>
    </b:bean>

	<b:bean id="userService" class="com.dayatang.projmgmt.service.DbUserDetailsService"/>
    <!-- 
    <user-service id="userService">
        <user name="yyang" password="rod" authorities="ROLE_SUPERVISOR,ROLE_USER" />
        <user name="xmfang" password="dianne" authorities="ROLE_USER" />
        <user name="zjzhai" password="scott" authorities="ROLE_USER" />
    </user-service>
     -->

    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <b:bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>

    <!-- Configuration for the environment can be overriden by system properties -->
    <context:property-placeholder system-properties-mode="OVERRIDE" properties-ref="environment"/>

    <util:properties id="environment">
        <b:prop key="cas.service.host">${cas.service.host}</b:prop>
        <b:prop key="cas.server.host">${cas.server.host}</b:prop>
    </util:properties>
</b:beans>
